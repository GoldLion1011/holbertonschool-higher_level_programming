The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Import the function:

    >>> add_integer = __import__('0-add_integer').add_integer

Correct usage: 

Passing two integers:

    >>> add_integer(6, 9)
    15

Passing two floats:

    >>> add_integer(5.81, 1.4448)
    6

Only one value passed: will add 98 in this case

    >>> add_integer(3)
    101

Adding negative values:

    >>> add_integer(-3, -6)
    -9

Adding one integer and one float:

    >>> add_integer(4, 2.2)
    6

    >>> add_integer(2.2, 4)
    6

a is neither int nor float:

    >>> add_integer("I am not a number", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

b is neither int nor float:

    >>> add_integer(5, "I am not a number")
    Traceback (most recent call last):
    TypeError: b must be an integer

String passed only:

    >>> add_integer("No numbers here")
    Traceback (most recent call last):
    TypeError: a must be an integer

Too many arguments:

    >>> add_integer(1, 2, 3)
    Traceback (most recent call last):
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
      
No arguments passed:

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Infinity passed:

    >>> add_integer(float('inf'), 3)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Super-long float passed:

    >>> add_integer(1, 4.783793409349352738397738402049)
    5

Complex number passed:

    >>> add_integer(7j, 6)
    Traceback (most recent call last):
    TypeError: a must be an integer
 














